@page "/warehouse"
@{
    @inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment _env
    @inject Data.ApplicationDbContext _appContext
    @inject NavigationManager NavigationManager


    string oUser = "";
    string sIdBranch = "";
    try
    {
        oUser = _appContext._httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Name).Value;
        using (var context = new Data.SQLContext())
        {
            var conn = context.Database.GetDbConnection();
            conn.Open();
            var command = conn.CreateCommand();

            string query = "SELECT id_branch FROM branches_roles  WHERE email_member = '" + oUser + "'";
            command.CommandText = query;
            var reader = command.ExecuteReader();

            while (reader.Read())
            {
                sIdBranch = reader.GetValue("id_branch").ToString();
            }

            conn.Close();
            if (sIdBranch.Length <= 0)
            {
                NavigationManager.NavigateTo("Home");
            }
        }
    }
    catch (Exception ex)
    {
        string sError = ex.Message;
    }

}
<AuthorizeView>
    <Authorized>
        <div>
            <div style="width:100%; text-align:right;">
                <NavLink class="nav-link" href="warehousemovs">
                    <span class="oi oi-arrow-right" aria-hidden="true"></span> Movimientos
                </NavLink>
                <NavLink class="nav-link" href="warehousecellars">
                    <span class="oi oi-home" aria-hidden="true"></span> Bodegas
                </NavLink>
            </div>

        </div>
        
        <h3>Bodega</h3>
        <hr />
        <label style="color:darkred;">@msgBox</label>

        <table style="width:100%;">
            <tr>
                <td><p><b>Bodega:</b></p></td>
                <td>
                    <select class="custom-select" @bind="id_cellar" >
                        <option value="-1">Seleccione una opción</option>
                        @using (var context = new Data.SQLContext())
                        {
                            var conn = context.Database.GetDbConnection(); conn.Open();
                            var command = conn.CreateCommand();
                            string query = "SELECT id_cellar, txt_cellar FROM cellars WHERE id_branch = " + sIdBranch + " AND yn_active = -1 ORDER BY txt_cellar";
                            command.CommandText = query;
                            var reader = command.ExecuteReader();
                            while (reader.Read())
                            {
                                <option value="@reader.GetValue("id_cellar").ToString()">@reader.GetValue("txt_cellar").ToString()</option>

                            }

                            conn.Close();
                        }
                    </select>
                </td>
            </tr>
            <tr>
                <td><p><b>Cod. Producto:</b></p></td>
                <td>
                    <input @bind-value="codprod" @bind-value:event="oninput" class="form-control" />
                    <button class="btn btn-primary" @onclick=@BtnFindNames>Buscar</button>
                    @if (bProduct == true)
                    {
                        <select class="custom-select" @onchange=@ddlFindNames>
                            <option value="-1">Seleccione una opción</option>
                            @using (var context = new Data.SQLContext())
                            {
                                var conn = context.Database.GetDbConnection(); conn.Open();
                                var command = conn.CreateCommand();
                                string query = "SELECT id_product, txt_product FROM warehouse WHERE id_branch = " + sIdBranch + " AND id_cellar = " + id_cellar + " AND (id_product like UPPER('%" + codprod + "%') OR txt_product like UPPER('%" + codprod + "%')) ORDER BY txt_product";
                                command.CommandText = query;
                                var reader = command.ExecuteReader();
                                while (reader.Read())
                                {
                                    <option value="@reader.GetValue("id_product").ToString()">@reader.GetValue("txt_product").ToString()</option>

                                }

                                conn.Close();
                            }
                        </select>
                    }
                </td>
            </tr>
            <tr>
                <td><p><b>Nombre Producto:</b></p></td>
                <td><input @bind-value="nameprod" @bind-value:event="oninput" class="form-control"  /></td>
            </tr>
            

        </table>
        <br />
        <table style="width:100%;">
            <tr>
                <td><p><b>Cant. Exist.:</b></p></td>
                <td><input @bind-value="qtyexist" @bind-value:event="oninput" class="form-control" /></td>
            </tr>
            <tr>
                <td><p><b>Cant. Alarma:</b></p></td>
                <td><input @bind-value="qtyalarm" @bind-value:event="oninput" class="form-control" /></td>
            </tr>
            <tr>
                <td><p><b>Fecha Ult. Trans.:</b></p></td>
                <td><input type="date" @bind-value="datelastentry" @bind-value:event="oninput" class="form-control" readonly /></td>
            </tr>
            <tr>
                <td><p><b>Unidad:</b></p></td>
                <td>
                    <select class="custom-select" @bind="idunit" >
                        <option value="-1">Seleccione una opción</option>
                        @using (var context = new Data.SQLContext())
                        {

                            var conn = context.Database.GetDbConnection();
                            conn.Open();
                            var command = conn.CreateCommand();
                            string query = "SELECT * FROM warehouse_units WHERE yn_active = -1 AND id_branch = " + sIdBranch + " ORDER BY txt_unit";
                            command.CommandText = query;
                            var reader = command.ExecuteReader();

                            while (reader.Read())
                            {
                                <option value="@reader.GetValue("id_unit").ToString()">@reader.GetValue("txt_unit").ToString() </option>

                            }

                            conn.Close();
                        }
                    </select>
                </td>
            </tr>
            <tr>
                <td><p><b>Proveedor:</b></p></td>
                <td>
                    <select class="custom-select" @bind="idprov" >
                        <option value="-1">Seleccione una opción</option>
                        @using (var context = new Data.SQLContext())
                        {

                            var conn = context.Database.GetDbConnection();
                            conn.Open();
                            var command = conn.CreateCommand();
                            string query = "SELECT * FROM providers WHERE yn_active = -1 AND id_branch = " + sIdBranch + " ORDER BY txt_prov";
                            command.CommandText = query;
                            var reader = command.ExecuteReader();

                            while (reader.Read())
                            {
                                <option value="@reader.GetValue("id_prov").ToString()">@reader.GetValue("txt_prov").ToString() </option>

                            }

                            conn.Close();
                        }
                    </select>
                </td>
            </tr>
            <tr>
                <td><p><b>Factor Unidad:</b></p></td>
                <td><input @bind-value="qty_factor" @bind-value:event="oninput" class="form-control" /></td>
            </tr>
            <tr>
                <td><p><b>Costo:</b></p></td>
                <td><input @bind-value="lastcost" @bind-value:event="oninput" class="form-control"  /></td>
            </tr>
            
            <tr>
                <td><p><b>Activo?:</b></p></td>
                <td><input type="checkbox" @bind-value="ynactive" checked=@ynactive class="form-control" /></td>
            </tr>
            <tr>
                <td><button class="btn btn-primary" @onclick=@BtnClick>Generar</button></td>
                <td></td>
            </tr>
        </table>

    </Authorized>
    <NotAuthorized>
        <h2>Please Login</h2>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [BindProperty]
    public string id_branch { get; set; } = "";
    [BindProperty]
    public string id_cellar { get; set; } = "";
    [BindProperty]
    public string msgBox { get; set; } = "";
    [BindProperty]
    public string codprod { get; set; } = "";
    [BindProperty]
    public string nameprod { get; set; } = "";
    [BindProperty]
    public string qtyexist { get; set; } = "";
    [BindProperty]
    public string qtyalarm { get; set; } = "";
    [BindProperty]
    public string idunit { get; set; } = "";
    [BindProperty]
    public string idprov { get; set; } = "";
    [BindProperty]
    public string qty_factor { get; set; } = "1";
    [BindProperty]
    public DateTime datelastentry { get; set; } = DateTime.Today;
    [BindProperty]
    public string lastcost { get; set; } = "";
    [BindProperty]
    public bool ynactive { get; set; } = false;
    [BindProperty]
    public bool bProduct { get; set; } = false;
    [BindProperty]
    public bool bModif { get; set; } = false;


    private void cleanscreen()
    {
        codprod = "";
        nameprod = "";
        qtyexist = "";
        qtyalarm = "";
        qty_factor = "1";
        lastcost = "";
        bModif = false;

    }

    private void ddlFindNames(ChangeEventArgs e)
    {
        msgBox = "";
        codprod = e.Value.ToString();
        bProduct = false;
        BtnFindIdProd();
    }


    private void BtnFindIdProd()
    {
        msgBox = "";
        bProduct = false;
        bModif = false;
        using (var context = new Data.SQLContext())
        {
            try
            {
                var conn = context.Database.GetDbConnection();
                conn.Open();
                var command = conn.CreateCommand();

                string query = "SELECT id_branch FROM branches_roles  WHERE email_member = '" + _appContext._httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Name).Value + "'";
                command.CommandText = query;
                var reader = command.ExecuteReader();

                while (reader.Read())
                {
                    id_branch = reader.GetValue("id_branch").ToString();
                }
                command = conn.CreateCommand();

                query = "SELECT *, ISNULL(REPLACE(CONVERT(VARCHAR(10),date_last_ent,102),'.','-'),'1900-01-01') f_lastentry_date  FROM warehouse WHERE ";
                query = query + " id_branch = " + id_branch + "";
                query = query + " AND id_cellar = " + id_cellar + "";
                query = query + " AND id_product = '" + codprod + "'";
                command.CommandText = query;
                reader = command.ExecuteReader();

                if (!reader.HasRows)
                    msgBox = "El dato a buscar no existe...";

                while (reader.Read())
                {
                    codprod = reader.GetValue("id_product").ToString();
                    nameprod = reader.GetValue("txt_product").ToString();
                    qtyexist = reader.GetValue("qty_exist").ToString();
                    qtyalarm = reader.GetValue("qty_alarm").ToString();
                    idunit = reader.GetValue("id_unit").ToString();
                    idprov = reader.GetValue("id_prov").ToString();
                    qty_factor = reader.GetValue("qty_factor").ToString();
                    datelastentry = DateTime.Parse(reader.GetValue("date_last_ent").ToString());
                    lastcost = reader.GetValue("last_cost").ToString();
                    if (reader.GetValue("yn_active").ToString() == "-1")
                        ynactive = true;
                    else
                        ynactive = false;
                    
                    bModif = true;
                }
                
                conn.Close();
                
            }
            catch (Exception ex)
            {
                string sMsg = ex.Message;
                msgBox = sMsg;
            }
        }

    }


    private void BtnFindNames()
    {
        msgBox = "";
        bProduct = true;
        bModif = false;
    }

    private void BtnClick()
    {
        using (var context = new Data.SQLContext())
        {
            try
            {

                var conn = context.Database.GetDbConnection();
                conn.Open();
                var command = conn.CreateCommand();

                string query = "SELECT id_branch FROM branches_roles  WHERE email_member = '" + _appContext._httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Name).Value + "'";
                command.CommandText = query;
                var reader = command.ExecuteReader();

                while (reader.Read())
                {
                    id_branch = reader.GetValue("id_branch").ToString();
                }

                command = conn.CreateCommand();

                if (bModif)
                {
                    query = "UPDATE warehouse SET ";
                    query = query + " txt_product = UPPER('" + nameprod + "')";
                    query = query + ", qty_exist = 0" + qtyexist;
                    query = query + ", qty_alarm = 0" + qtyalarm;
                    query = query + ", id_unit = 0" + idunit;
                    query = query + ", id_prov =  0" + idprov;
                    query = query + ", qty_factor = 0" + qty_factor;
                    query = query + ", modif_date = getdate()";
                    query = query + ", modif_user = UPPER('" + _appContext._httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Name).Value + "')";
                    query = query + ", last_cost = 0" + lastcost;
                    if(ynactive)
                        query = query + ", yn_active = -1";
                    else
                        query = query + ", yn_active = 0";
                    query = query + " WHERE ";
                    query = query + " id_branch = " + id_branch + "";
                    query = query + " AND id_cellar = " + id_cellar + "";
                    query = query + " AND id_product = '" + codprod + "'";
                    command.CommandText = query;
                    command.ExecuteNonQuery();
                    msgBox = "Producto actualizado correctamente...";
                }
                else
                {
                    query = "INSERT INTO warehouse SELECT ";
                    query = query + " 0" + id_branch + "";
                    query = query + ", 0" + id_cellar + "";
                    query = query + ", UPPER('" + codprod + "')";
                    query = query + ", UPPER('" + nameprod + "')";
                    query = query + ", 0" + qtyexist;
                    query = query + ", 0" + qtyalarm;
                    query = query + ", 0" + idunit;
                    query = query + ", 0" + idprov;
                    query = query + ", 0" + qty_factor;
                    query = query + ", getdate()";
                    query = query + ", 0" + lastcost;
                    if(ynactive)
                        query = query + ", -1";
                    else
                        query = query + ", 0";
                    query = query + ", UPPER('" + _appContext._httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Name).Value + "')";
                    query = query + ", null, getdate(), null";
                    command.CommandText = query;
                    command.ExecuteNonQuery();
                    msgBox = "Producto guardado correctamente...";
                }




                conn.Close();
                cleanscreen();
                NavigationManager.NavigateTo("/warehouse");
            }
            catch (Exception ex)
            {
                string sMsg = ex.Message;
                msgBox = sMsg;
            }





        }

    }

}

